// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GeoQuest.Models;

public partial class GeoQuestContext : DbContext
{
    public GeoQuestContext(DbContextOptions<GeoQuestContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Option> Options { get; set; }

    public virtual DbSet<OptionAnswer> OptionAnswers { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskInstance> TaskInstances { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TestInstance> TestInstances { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1250_CI_AS");

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3214EC07B9D76B10");

            entity.ToTable("Account");

            entity.HasIndex(e => e.Email, "UQ__Account__A9D10534105AC939").IsUnique();

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Salt)
                .IsRequired()
                .IsUnicode(false);

            entity.HasMany(d => d.Subjects).WithMany(p => p.Students)
                .UsingEntity<Dictionary<string, object>>(
                    "StudentSubject",
                    r => r.HasOne<Subject>().WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__StudentSu__Subje__35BCFE0A"),
                    l => l.HasOne<Account>().WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__StudentSu__Stude__36B12243"),
                    j =>
                    {
                        j.HasKey("StudentId", "SubjectId").HasName("PK__StudentS__A80491A38B23DA8C");
                        j.ToTable("StudentSubject");
                    });
        });

        modelBuilder.Entity<Option>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Options__3214EC078A5BF550");
        });

        modelBuilder.Entity<OptionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OptionAn__3214EC0710D88DB3");

            entity.ToTable("OptionAnswer");

            entity.Property(e => e.Content)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Option).WithMany(p => p.OptionAnswers)
                .HasForeignKey(d => d.OptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OptionAns__Optio__2C3393D0");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subject__3214EC072C66AF30");

            entity.ToTable("Subject");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Teacher).WithMany(p => p.SubjectsNavigation)
                .HasForeignKey(d => d.TeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subject__Teacher__276EDEB3");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Task__3214EC07777DA9AC");

            entity.ToTable("Task");

            entity.Property(e => e.Answer)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Question)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Options).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.OptionsId)
                .HasConstraintName("FK__Task__OptionsId__398D8EEE");
        });

        modelBuilder.Entity<TaskInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskInst__3214EC077D894FFE");

            entity.ToTable("TaskInstance");

            entity.Property(e => e.StudentAnswer)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Task).WithMany(p => p.TaskInstances)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TaskInsta__TaskI__3C69FB99");

            entity.HasOne(d => d.TestInstance).WithMany(p => p.TaskInstances)
                .HasForeignKey(d => d.TestInstanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TaskInsta__TestI__3D5E1FD2");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Test__3214EC0791B1CAD5");

            entity.ToTable("Test");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Subject).WithMany(p => p.Tests)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Test__SubjectId__2F10007B");

            entity.HasMany(d => d.Tasks).WithMany(p => p.Tests)
                .UsingEntity<Dictionary<string, object>>(
                    "TestTask",
                    r => r.HasOne<Task>().WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__TestTask__TaskId__412EB0B6"),
                    l => l.HasOne<Test>().WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__TestTask__TestId__403A8C7D"),
                    j =>
                    {
                        j.HasKey("TestId", "TaskId").HasName("PK__TestTask__8B05A5FB89D26C56");
                        j.ToTable("TestTask");
                    });
        });

        modelBuilder.Entity<TestInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestInst__3214EC07A98A69FF");

            entity.ToTable("TestInstance");

            entity.Property(e => e.InviteCode)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Student).WithMany(p => p.TestInstances)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestInsta__Stude__32E0915F");

            entity.HasOne(d => d.Test).WithMany(p => p.TestInstances)
                .HasForeignKey(d => d.TestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestInsta__TestI__31EC6D26");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}