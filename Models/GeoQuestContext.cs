// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GeoQuest.Models;

public partial class GeoQuestContext : DbContext
{
    public GeoQuestContext(DbContextOptions<GeoQuestContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Account { get; set; }

    public virtual DbSet<OptionAnswer> OptionAnswer { get; set; }

    public virtual DbSet<Options> Options { get; set; }

    public virtual DbSet<Subject> Subject { get; set; }

    public virtual DbSet<Test> Test { get; set; }

    public virtual DbSet<TestInstance> TestInstance { get; set; }

    public virtual DbSet<TestInstanceBase> TestInstanceBase { get; set; }

    public virtual DbSet<TestTask> TestTask { get; set; }

    public virtual DbSet<TestTaskInstance> TestTaskInstance { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1250_CI_AS");

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Account__3214EC07B873EEAC");

            entity.HasIndex(e => e.Email, "UQ__Account__A9D105344C13562D").IsUnique();

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Salt)
                .IsRequired()
                .IsUnicode(false);

            entity.HasMany(d => d.Subject).WithMany(p => p.Student)
                .UsingEntity<Dictionary<string, object>>(
                    "StudentSubject",
                    r => r.HasOne<Subject>().WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__StudentSu__Subje__398D8EEE"),
                    l => l.HasOne<Account>().WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__StudentSu__Stude__3A81B327"),
                    j =>
                    {
                        j.HasKey("StudentId", "SubjectId").HasName("PK__StudentS__A80491A332A8694E");
                    });
        });

        modelBuilder.Entity<OptionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OptionAn__3214EC07197BC6B4");

            entity.Property(e => e.Content)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Option).WithMany(p => p.OptionAnswer)
                .HasForeignKey(d => d.OptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OptionAns__Optio__2C3393D0");
        });

        modelBuilder.Entity<Options>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Options__3214EC0741AE60BF");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subject__3214EC072846593C");

            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Teacher).WithMany(p => p.SubjectNavigation)
                .HasForeignKey(d => d.TeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subject__Teacher__276EDEB3");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Test__3214EC07D88230EC");

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Subject).WithMany(p => p.Test)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Test__SubjectId__300424B4");

            entity.HasOne(d => d.Teacher).WithMany(p => p.Test)
                .HasForeignKey(d => d.TeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Test__TeacherId__2F10007B");
        });

        modelBuilder.Entity<TestInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestInst__3214EC07399D9672");

            entity.HasOne(d => d.Student).WithMany(p => p.TestInstance)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestInsta__Stude__36B12243");

            entity.HasOne(d => d.TestInstanceBase).WithMany(p => p.TestInstance)
                .HasForeignKey(d => d.TestInstanceBaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestInsta__TestI__35BCFE0A");
        });

        modelBuilder.Entity<TestInstanceBase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestInst__3214EC07BFE14D30");

            entity.HasOne(d => d.Test).WithMany(p => p.TestInstanceBase)
                .HasForeignKey(d => d.TestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestInsta__TestI__32E0915F");
        });

        modelBuilder.Entity<TestTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestTask__3214EC07D509CE7E");

            entity.Property(e => e.Answer).IsUnicode(false);
            entity.Property(e => e.MapCenter)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.NonMapPoint).IsUnicode(false);
            entity.Property(e => e.Question)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Options).WithMany(p => p.TestTask)
                .HasForeignKey(d => d.OptionsId)
                .HasConstraintName("FK__TestTask__Option__3D5E1FD2");

            entity.HasOne(d => d.Test).WithMany(p => p.TestTask)
                .HasForeignKey(d => d.TestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestTask__TestId__3E52440B");
        });

        modelBuilder.Entity<TestTaskInstance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestTask__3214EC07E3BF24C8");

            entity.Property(e => e.StudentAnswer).IsUnicode(false);

            entity.HasOne(d => d.TestInstance).WithMany(p => p.TestTaskInstance)
                .HasForeignKey(d => d.TestInstanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestTaskI__TestI__4222D4EF");

            entity.HasOne(d => d.TestTask).WithMany(p => p.TestTaskInstance)
                .HasForeignKey(d => d.TestTaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestTaskI__TestT__412EB0B6");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}